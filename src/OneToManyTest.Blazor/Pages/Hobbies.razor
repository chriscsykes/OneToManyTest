@page "/hobbies"
@attribute [Authorize(OneToManyTestPermissions.Hobbies.Default)]
@using OneToManyTest.Hobbies
@using OneToManyTest.Localization
@using OneToManyTest.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components.Web
@using Blazorise
@using Blazorise.Components
@using Blazorise.DataGrid
@using Volo.Abp.BlazoriseUI
@using Volo.Abp.BlazoriseUI.Components
@using Volo.Abp.ObjectMapping
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout
@using OneToManyTest.Permissions
@using Microsoft.AspNetCore.Components
@using Volo.Abp.AspNetCore.Components.Web
@using Volo.Abp.Http.Client
@inherits OneToManyTestComponentBase
@inject IHobbiesAppService HobbiesAppService
@inject IUiMessageService UiMessageService
@inject IRemoteServiceConfigurationProvider RemoteServiceConfigurationProvider
@inject NavigationManager NavigationManager

@* ************************* PAGE HEADER ************************* *@
<PageHeader Title="@L["Hobbies"]" BreadcrumbItems="BreadcrumbItems" Toolbar="Toolbar">

</PageHeader>

@* ************************* SEARCH ************************* *@
<Card>
    <CardBody>
        <Form id="HobbySearchForm" class="mb-3">
            <Addons>
                <Addon AddonType="AddonType.Body">
                    <TextEdit @bind-Text="@Filter.FilterText"
                              Autofocus="true"
                              Placeholder="@L["Search"]">
                    </TextEdit>
                </Addon>
                <Addon AddonType="AddonType.End">
                    <SubmitButton Form="HobbySearchForm" Clicked="GetHobbiesAsync">
                        <Icon Name="IconName.Search" Class="me-1"></Icon>@L["Search"]
                    </SubmitButton>
                </Addon>
            </Addons>
        </Form>
    </CardBody>
</Card>

@* ************************* DATA GRID ************************* *@
<Card>
    <CardBody>
        <DataGrid TItem="HobbyWithNavigationPropertiesDto"
                  Data="HobbyList"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  Responsive="true"
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridEntityActionsColumn TItem="HobbyWithNavigationPropertiesDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="HobbyWithNavigationPropertiesDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="HobbyWithNavigationPropertiesDto"
                                          Visible="@CanEditHobby"
                                          Clicked="async () => await OpenEditHobbyModalAsync(context)"
                                          Text="@L["Edit"]"></EntityAction>
                            <EntityAction TItem="HobbyWithNavigationPropertiesDto"
                                          Visible="@CanDeleteHobby"
                                          Clicked="() => DeleteHobbyAsync(context)"
                                          ConfirmationMessage="@(()=> L["DeleteConfirmationMessage"])"
                                          Text="@L["Delete"]"></EntityAction>
                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
               
              <DataGridColumn TItem="HobbyWithNavigationPropertiesDto"
                      Field="Hobby.Name"
                      Caption="@L["Name"]">
              </DataGridColumn>

              <DataGridColumn TItem="HobbyWithNavigationPropertiesDto"
                      Field="Hobby.YearsPerformed"
                      Caption="@L["YearsPerformed"]">
              </DataGridColumn>

            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

@* ************************* CREATE MODAL ************************* *@
<Modal @ref="CreateHobbyModal" Closing="@CreateHobbyModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
        <Form id="CreateHobbyForm">
            <ModalHeader>
                <ModalTitle>@L["NewHobby"]</ModalTitle>
                <CloseButton Clicked="CloseCreateHobbyModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Tabs SelectedTab="@SelectedCreateTab" SelectedTabChanged="@OnSelectedCreateTabChanged">
                    <Items>
                        <Tab Name="hobby-create-tab">@L["Hobby"].Value</Tab> 
                        <Tab Name="customers-create-tab">@L["Customers"].Value</Tab>
                    </Items>
                    <Content>
                <Validations @ref="@NewHobbyValidations"
                            Mode="ValidationMode.Auto"
                            Model="@NewHobby"
                            ValidateOnLoad="false">
                     <TabPanel Name="hobby-create-tab">
                    
                    <Validation>
                        <Field>
                            <FieldLabel>@L["Name"] *</FieldLabel>
                            <TextEdit @bind-Text="@NewHobby.Name" >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation>
                        <Field>
                            <FieldLabel>@L["YearsPerformed"]</FieldLabel>
                            <NumericPicker TValue="int" @bind-Value="@NewHobby.YearsPerformed"  Decimals="0">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    </TabPanel>
                                                <TabPanel Name="customers-create-tab">

                                <Row>
                                    <Column ColumnSize="ColumnSize.Is9">
                                        <Field>

                                            <Autocomplete Data="@Customers"
                                                          TItem="LookupDto<Guid>"
                                                          TValue="string"
                                                          TextField="@((item) => item.DisplayName)"
                                                          ValueField="@((item) => item.Id.ToString())"
                                                          SearchChanged="@GetCustomerLookupAsync"
                                                          @bind-SelectedValue="@SelectedCustomerId"
                                                          @bind-SelectedText="@SelectedCustomerText"
                                                          Placeholder="&#8212;"/>
                                        </Field>
                                    </Column>

                                    <Column ColumnSize="ColumnSize.Is3">
                                        <Button Color="Color.Info" TextColor="TextColor.White" Size="Size.Small" Clicked="AddCustomer">
                                            <Icon class="fa fa-plus"></Icon> @L["Add"]
                                        </Button>
                                    </Column>
                                </Row>
                                @if (SelectedCustomers.Any())
                                {
                                    <Table striped-rows="true" responsive-sm="true" class="mt-2">
                                        <TableHeader>
                                            <TableHeaderCell><Span class="float-start">@L["Email"]</Span></TableHeaderCell>
                                        </TableHeader>
                                        <TableBody>
                                            @foreach (var customer in SelectedCustomers)
                                            {
                                                <TableRow>
                                                    <TableRowCell><Span class="float-start">@customer.DisplayName</Span></TableRowCell>
                                                    <TableRowCell>
                                                        <span class="btn btn-danger btn-sm float-end"
                                                              @onclick="() => SelectedCustomers.RemoveAll(s => s.Id == customer.Id)">
                                                            <Icon Class="fa fa-trash"></Icon>
                                                        </span>
                                                    </TableRowCell>
                                                </TableRow>
                                            }
                                        </TableBody>
                                    </Table>
                                }
                            </TabPanel>
                </Validations>
                    </Content>
                </Tabs>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateHobbyModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="CreateHobbyForm" Clicked="CreateHobbyAsync" />
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@* ************************* EDIT MODAL ************************* *@
<Modal @ref="EditHobbyModal" Closing="@EditHobbyModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
        <Form id="EditHobbyForm">
            <ModalHeader>
                <ModalTitle>@L["Update"]</ModalTitle>
                <CloseButton Clicked="CloseEditHobbyModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Tabs SelectedTab="@SelectedEditTab" SelectedTabChanged="@OnSelectedEditTabChanged">
                    <Items>
                        <Tab Name="hobby-edit-tab">@L["Hobby"].Value</Tab>
                        
                        <Tab Name="customers-edit-tab">@L["Customers"].Value</Tab>
                    </Items>
                    <Content>
                <Validations @ref="@EditingHobbyValidations"
                            Mode="ValidationMode.Auto"
                            Model="@EditingHobby"
                            ValidateOnLoad="false">
                     <TabPanel Name="hobby-edit-tab">
                    
                    <Validation>
                        <Field>
                            <FieldLabel>@L["Name"] *</FieldLabel>
                            <TextEdit @bind-Text="@EditingHobby.Name" >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation>
                        <Field>
                            <FieldLabel>@L["YearsPerformed"]</FieldLabel>
                            <NumericPicker TValue="int" @bind-Value="@EditingHobby.YearsPerformed"  Decimals="0">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    </TabPanel>
                                                <TabPanel Name="customers-edit-tab">

                                <Row>
                                    <Column ColumnSize="ColumnSize.Is9">
                                        <Field>

                                            <Autocomplete Data="@Customers"
                                                          TItem="LookupDto<Guid>"
                                                          TValue="string"
                                                          TextField="@((item) => item.DisplayName)"
                                                          ValueField="@((item) => item.Id.ToString())"
                                                          SearchChanged="@GetCustomerLookupAsync"
                                                          @bind-SelectedValue="@SelectedCustomerId"
                                                          @bind-SelectedText="@SelectedCustomerText"
                                                          Placeholder="&#8212;"/>
                                        </Field>
                                    </Column>

                                    <Column ColumnSize="ColumnSize.Is3">
                                        <Button Color="Color.Info" TextColor="TextColor.White" Size="Size.Small" Clicked="AddCustomer">
                                            <Icon class="fa fa-plus"></Icon> @L["Add"]
                                        </Button>
                                    </Column>
                                </Row>
                                @if (SelectedCustomers.Any())
                                {
                                    <Table striped-rows="true" responsive-sm="true" class="mt-2">
                                        <TableHeader>
                                            <TableHeaderCell><Span class="float-start">@L["Email"]</Span></TableHeaderCell>
                                        </TableHeader>
                                        <TableBody>
                                            @foreach (var customer in SelectedCustomers)
                                            {
                                                <TableRow>
                                                    <TableRowCell><Span class="float-start">@customer.DisplayName</Span></TableRowCell>
                                                    <TableRowCell>
                                                        <span class="btn btn-danger btn-sm float-end"
                                                              @onclick="() => SelectedCustomers.RemoveAll(s => s.Id == customer.Id)">
                                                            <Icon Class="fa fa-trash"></Icon>
                                                        </span>
                                                    </TableRowCell>
                                                </TableRow>
                                            }
                                        </TableBody>
                                    </Table>
                                }
                            </TabPanel>
                </Validations>
                    </Content>
                </Tabs>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditHobbyModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="CreateHobbyForm" Clicked="UpdateHobbyAsync" />
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
